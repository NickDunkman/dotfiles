#!/bin/bash

program_name=$(basename "$0")

# colors for output
green_fg=$(tput setaf 2)
red_fg=$(tput setaf 1)
reset=$(tput sgr0)

function fatal_error {
    printf "\n$program_name: ${red_fg}FATAL: $1$reset\n" 1>&2
    exit 1
}

which git > /dev/null
if [ $? -ne 0 ]; then
    fatal_error 'git is not installed.'
fi

inside_git_repo=$(git rev-parse --is-inside-work-tree 2>/dev/null)
if [ ! $inside_git_repo ]; then
    fatal_error "not in a git directory"
fi

head_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
if [ -z $head_branch ]; then
    fatal_error "could not parse a \$merge_branch"
fi

usage="
usage: $program_name [help|-h|--help]

Description:

    \"$program_name\" rebases against the HEAD branch:

        git rebase origin/$head_branch
"

for option in $@
do
    case $option in
      -h|--help|help)
          echo "$usage"
          exit 0 
          ;;
      *)
          option_name=${option/=*/""}
          fatal_error "invalid option: $option_name"
    esac
done

# There cannot be any uncommitted changes on current branch. Untracked files are allowed.
git diff --quiet HEAD
if [ $? -ne 0 ]; then
    fatal_error "you have uncommitted changes, aborting"
fi

git rebase origin/$head_branch